#include <SPI.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1325.h>
#include <FastLED.h>

#define OLED_CS PB4
#define OLED_RESET PC3
#define OLED_DC PB0

#define NUM_LEDS 3
#define DATA_PIN 23
CRGB leds[NUM_LEDS];

// this is for hardware SPI, fast! but fixed oubs
Adafruit_SSD1325 display(OLED_DC, OLED_RESET, OLED_CS);

  static const unsigned char PROGMEM hearty5050_bmp1[] =
  {  

  0x00,0x00,0x00,0x00,0x00,0x00,0x00
  ,0x00,0x00,0x00,0x00,0x00,0x00,0x00
  ,0x00,0x00,0x00,0x00,0x00,0x00,0x00
  ,0x00,0x00,0x00,0x00,0x00,0x00,0x00
  ,0x00,0x00,0x00,0x00,0x00,0x00,0x00
  ,0x00,0x00,0x00,0x00,0x00,0x00,0x00
  ,0x00,0x00,0x00,0x00,0x00,0x00,0x00
  ,0x00,0x00,0x00,0x00,0x00,0x00,0x00
  ,0x00,0x00,0x00,0x00,0x00,0x00,0x00
  ,0x00,0x00,0x00,0x00,0x00,0x00,0x00
  ,0x00,0x00,0x00,0x00,0x00,0x00,0x00
  ,0x00,0x00,0x00,0x00,0x00,0x00,0x00
  ,0x00,0x00,0x00,0x00,0x00,0x00,0x00
  ,0x00,0x00,0x00,0x00,0x00,0x00,0x00
  ,0x00,0x00,0x00,0x0c,0x00,0x00,0x00
  ,0x00,0x00,0x3e,0x21,0x80,0x00,0x00
  ,0x00,0x00,0x81,0x40,0xc0,0x00,0x00
  ,0x00,0x01,0x00,0x80,0x40,0x00,0x00
  ,0x00,0x00,0x00,0x80,0x00,0x00,0x00
  ,0x00,0x02,0x00,0x00,0x20,0x00,0x00
  ,0x00,0x02,0x00,0x00,0x20,0x00,0x00
  ,0x00,0x02,0x00,0x00,0x20,0x00,0x00
  ,0x00,0x01,0x00,0x00,0x20,0x00,0x00
  ,0x00,0x01,0x00,0x00,0x40,0x00,0x00
  ,0x00,0x01,0x00,0x00,0x40,0x00,0x00
  ,0x00,0x00,0x80,0x00,0x80,0x00,0x00
  ,0x00,0x00,0xc0,0x00,0x80,0x00,0x00
  ,0x00,0x00,0x40,0x01,0x00,0x00,0x00
  ,0x00,0x00,0x20,0x00,0x00,0x00,0x00
  ,0x00,0x00,0x10,0x02,0x00,0x00,0x00
  ,0x00,0x00,0x00,0x04,0x00,0x00,0x00
  ,0x00,0x00,0x08,0x08,0x00,0x00,0x00
  ,0x00,0x00,0x04,0x10,0x00,0x00,0x00
  ,0x00,0x00,0x00,0x20,0x00,0x00,0x00
  ,0x00,0x00,0x00,0x40,0x00,0x00,0x00
  ,0x00,0x00,0x00,0x00,0x00,0x00,0x00
  ,0x00,0x00,0x00,0x00,0x00,0x00,0x00
  ,0x00,0x00,0x00,0x00,0x00,0x00,0x00
  ,0x00,0x00,0x00,0x00,0x00,0x00,0x00
  ,0x00,0x00,0x00,0x00,0x00,0x00,0x00
  ,0x00,0x00,0x00,0x00,0x00,0x00,0x00
  ,0x00,0x00,0x00,0x00,0x00,0x00,0x00
  ,0x00,0x00,0x00,0x00,0x00,0x00,0x00
  ,0x00,0x00,0x00,0x00,0x00,0x00,0x00
  ,0x00,0x00,0x00,0x00,0x00,0x00,0x00
  ,0x00,0x00,0x00,0x00,0x00,0x00,0x00
  ,0x00,0x00,0x00,0x00,0x00,0x00,0x00
  ,0x00,0x00,0x00,0x00,0x00,0x00,0x00
  ,0x00,0x00,0x00,0x00,0x00,0x00,0x00
  ,0x11,0x11,0x11,0x11,0x00,0x00,0x00 
  
  };

void testdrawbitmap(const uint8_t *bitmap, uint8_t w, uint8_t h) {
  uint8_t icons[10][3];

  randomSeed(666);     // whatever seed


  // initialize
  for (uint8_t f=0; f< 10; f++) {
    icons[f][0] = random(display.width());
    icons[f][1] = 0;
    icons[f][1] = random(5) + 1;
    
    Serial.print("x: ");
    Serial.print(icons[f][0], DEC);
    Serial.print(" y: ");
    Serial.print(icons[f][1], DEC);
    Serial.print(" dy: ");
    Serial.println(icons[f][1], DEC);
  }

  while (1) {
    // draw each icon
    for (uint8_t f=0; f< 10; f++) {
      display.drawBitmap(icons[f][0], icons[f][1], hearty5050_bmp1, w, h, WHITE);
    }
    display.display();
    delay(200);
    
    // then erase it + move it
    for (uint8_t f=0; f< 10; f++) {
      display.drawBitmap(icons[f][0], icons[f][1],  hearty5050_bmp1, w, h, BLACK);
      // move it
      icons[f][1] += icons[f][1];
      // if its gone, reinit
      if (icons[f][1] > display.height()) {
	icons[f][0] = random(display.width());
	icons[f][1] = 0;
	icons[f][1] = random(5) + 1;
      }
    }
   }
}


void testdrawchar(void) {
  display.setTextSize(1);
  display.setTextWrap(false);
  display.setTextColor(WHITE);
  display.setCursor(0,0);

  for (int16_t i=0; i < 168; i++) {
    if (i == '\n') continue;
    display.write(i);
    if ((i > 0) && (i % 21 == 0))
      display.println();
  }    
  display.display();
}

void testdrawcircle(void) {
  for (uint8_t i=0; i<display.height(); i+=2) {
    display.drawCircle(display.width()/2, display.height()/2, i, WHITE);
    display.display();
  }
}


void testdrawrect(void) {
  for (int16_t i=0; i<display.height()/2; i+=2) {
    display.drawRect(i, i, display.width()-2*i, display.height()-2*i, WHITE);
    display.display();
  }
}

void testdrawline() {  
  for (int16_t i=0; i<display.width(); i+=4) {
    display.drawLine(0, 0, i, display.height()-1, WHITE);
    display.display();
  }
  for (int16_t i=0; i<display.height(); i+=4) {
    display.drawLine(0, 0, display.width()-1, i, WHITE);
    display.display();
  }
  delay(250);
  
  display.clearDisplay();
  for (int16_t i=0; i<display.width(); i+=4) {
    display.drawLine(0, display.height()-1, i, 0, WHITE);
    display.display();
  }
  for (int16_t i=display.height()-1; i>=0; i-=4) {
    display.drawLine(0, display.height()-1, display.width()-1, i, WHITE);
    display.display();
  }
  delay(250);
  
  display.clearDisplay();
  for (int16_t i=display.width()-1; i>=0; i-=4) {
    display.drawLine(display.width()-1, display.height()-1, i, 0, WHITE);
    display.display();
  }
  for (int16_t i=display.height()-1; i>=0; i-=4) {
    display.drawLine(display.width()-1, display.height()-1, 0, i, WHITE);
    display.display();
  }
  delay(250);

  display.clearDisplay();
  for (int16_t i=0; i<display.height(); i+=4) {
    display.drawLine(display.width()-1, 0, 0, i, WHITE);
    display.display();
  }
  for (int16_t i=0; i<display.width(); i+=4) {
    display.drawLine(display.width()-1, 0, i, display.height()-1, WHITE); 
    display.display();
  }
  delay(250);
}

void setup()   {                
  
  leds[0] = CRGB::Red;
  leds[1] = CRGB::Green;
  leds[2] = CRGB::Blue;
  FastLED.addLeds<SK6812, DATA_PIN, GRB>(leds, NUM_LEDS);

  FastLED.show();
  // by default, we'll generate the high voltage from the 3.3v line internally! (neat!)
  display.begin();
  // init done

  display.display(); // show splashscreen
  delay(50);
  display.clearDisplay();   // clears the screen and buffer


display.setRotation(0);

  // miniature bitmap display
  display.clearDisplay();
  display.drawBitmap(30, 16,  hearty5050_bmp1, 50, 50, 1);
  display.display();

  display.clearDisplay();

  display.clearDisplay();
  display.drawBitmap(30, 16,  hearty5050_bmp1, 50, 50, 1);
  display.display();

  display.clearDisplay();
  display.drawBitmap(30, 16,  hearty5050_bmp1, 50, 50, 1);
  display.display();


  // invert the display
  display.invertDisplay(true);
  delay(1000); 
  display.invertDisplay(false);
  delay(1000); 

}

void loop(){

  FastLED.show();

}