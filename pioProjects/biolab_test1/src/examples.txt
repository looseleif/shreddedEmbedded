/*********************************************************************
This is a library for our Monochrome OLEDs based on SSD1325 drivers

  Pick one up today in the adafruit shop!
  ------> http://www.adafruit.com/category/63_98

These displays use SPI to communicate, 4 or 5 pins are required to  
interface

Adafruit invests time and resources providing this open source code, 
please support Adafruit and open-source hardware by purchasing 
products from Adafruit!

Written by Limor Fried/Ladyada  for Adafruit Industries.  
BSD license, check license.txt for more information
All text above, and the splash screen below must be included in any redistribution
*********************************************************************/

#include <SPI.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1325.h>

// If using software SPI, define CLK and MOSI
#define OLED_CLK 13
#define OLED_MOSI 11

// These are neede for both hardware & softare SPI
#define OLED_CS PB4
#define OLED_RESET PB1
#define OLED_DC PB0

// this is software SPI, slower but any pins
//Adafruit_SSD1325 display(OLED_MOSI, OLED_CLK, OLED_DC, OLED_RESET, OLED_CS);

// this is for hardware SPI, fast! but fixed oubs
Adafruit_SSD1325 display(OLED_DC, OLED_RESET, OLED_CS);

/* settings for our little animation later */
#define NUMFLAKES 10
#define XPOS 0
#define YPOS 1
#define DELTAY 2

#define LOGO16_GLCD_HEIGHT 16 
#define LOGO16_GLCD_WIDTH  16 
static const unsigned char PROGMEM logo16_glcd_bmp[] =
{ B00000000, B11000000,
  B00000001, B11000000,
  B00000001, B11000000,
  B00000011, B11100000,
  B11110011, B11100000,
  B11111110, B11111000,
  B01111110, B11111111,
  B00110011, B10011111,
  B00011111, B11111100,
  B00001101, B01110000,
  B00011011, B10100000,
  B00111111, B11100000,
  B00111111, B11110000,
  B01111100, B11110000,
  B01110000, B01110000,
  B00000000, B00110000 };

  static const unsigned char PROGMEM hearty5050_bmp[] =
  {  0x00,0x00,0x00,0x00,0x00,0x00,0x00
    ,0x00,0x00,0x00,0x00,0x00,0x00,0x00
    ,0x00,0x00,0x00,0x00,0x00,0x00,0x00
    ,0x00,0x00,0x00,0x00,0x00,0x00,0x00
    ,0x00,0x00,0x00,0x00,0x00,0x00,0x00
    ,0x00,0x00,0x00,0x00,0x00,0x00,0x00
    ,0x00,0x00,0x00,0x00,0x00,0x00,0x00
    ,0x00,0x00,0x00,0x00,0x00,0x00,0x00
    ,0x00,0x00,0x00,0x00,0x00,0x00,0x00
    ,0x00,0x00,0x00,0x00,0x00,0x00,0x00
    ,0x00,0x00,0x00,0x00,0x00,0x00,0x00
    ,0x00,0x00,0x00,0x00,0x00,0x00,0x00
    ,0x00,0x00,0x00,0x00,0x00,0x00,0x00
    ,0x00,0x00,0x00,0x00,0x00,0x00,0x00
    ,0x00,0x00,0x00,0x0c,0x00,0x00,0x00
    ,0x00,0x00,0x3e,0x21,0x80,0x00,0x00
    ,0x00,0x00,0x81,0x40,0xc0,0x00,0x00
    ,0x00,0x01,0x00,0x80,0x40,0x00,0x00
    ,0x00,0x00,0x00,0x80,0x00,0x00,0x00
    ,0x00,0x02,0x00,0x00,0x20,0x00,0x00
    ,0x00,0x02,0x00,0x00,0x20,0x00,0x00
    ,0x00,0x02,0x00,0x00,0x20,0x00,0x00
    ,0x00,0x01,0x00,0x00,0x20,0x00,0x00
    ,0x00,0x01,0x00,0x00,0x40,0x00,0x00
    ,0x00,0x01,0x00,0x00,0x40,0x00,0x00
    ,0x00,0x00,0x80,0x00,0x80,0x00,0x00
    ,0x00,0x00,0xc0,0x00,0x80,0x00,0x00
    ,0x00,0x00,0x40,0x01,0x00,0x00,0x00
    ,0x00,0x00,0x20,0x00,0x00,0x00,0x00
    ,0x00,0x00,0x10,0x02,0x00,0x00,0x00
    ,0x00,0x00,0x00,0x04,0x00,0x00,0x00
    ,0x00,0x00,0x08,0x08,0x00,0x00,0x00
    ,0x00,0x00,0x04,0x10,0x00,0x00,0x00
    ,0x00,0x00,0x00,0x20,0x00,0x00,0x00
    ,0x00,0x00,0x00,0x40,0x00,0x00,0x00
    ,0x00,0x00,0x00,0x00,0x00,0x00,0x00
    ,0x00,0x00,0x00,0x00,0x00,0x00,0x00
    ,0x00,0x00,0x00,0x00,0x00,0x00,0x00
    ,0x00,0x00,0x00,0x00,0x00,0x00,0x00
    ,0x00,0x00,0x00,0x00,0x00,0x00,0x00
    ,0x00,0x00,0x00,0x00,0x00,0x00,0x00
    ,0x00,0x00,0x00,0x00,0x00,0x00,0x00
    ,0x00,0x00,0x00,0x00,0x00,0x00,0x00
    ,0x00,0x00,0x00,0x00,0x00,0x00,0x00
    ,0x00,0x00,0x00,0x00,0x00,0x00,0x00
    ,0x00,0x00,0x00,0x00,0x00,0x00,0x00
    ,0x00,0x00,0x00,0x00,0x00,0x00,0x00
    ,0x00,0x00,0x00,0x00,0x00,0x00,0x00
    ,0x00,0x00,0x00,0x00,0x00,0x00,0x00
    ,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
  
// The Arduino UNO doesnt have enough RAM for gradients
// but the *display* supports it!
void graydient()
{
  unsigned char x,y;
  display.command(0x15); /* set column address */
  display.command(0x00); /* set column start address */
  display.command(0x3f); /* set column end address */
  display.command(0x75); /* set row address */
  display.command(0x00); /* set row start address */
  display.command(0x3f); /* set row end address */
  for(y=0;y<64;y++) {
    for(x=0;x<4;x++) {
	display.data(0x00);
	display.data(0x11);
	display.data(0x22);
	display.data(0x33);
	display.data(0x44);
	display.data(0x55);
	display.data(0x66);
	display.data(0x77);
	display.data(0x88);
	display.data(0x99);
	display.data(0xAA);
	display.data(0xBB);
	display.data(0xCC);
	display.data(0xDD);
	display.data(0xEE);
	display.data(0xFF);
    }
  }
}

void testdrawbitmap(const uint8_t *bitmap, uint8_t w, uint8_t h) {
  uint8_t icons[NUMFLAKES][3];

  randomSeed(666);     // whatever seed


  // initialize
  for (uint8_t f=0; f< NUMFLAKES; f++) {
    icons[f][XPOS] = random(display.width());
    icons[f][YPOS] = 0;
    icons[f][DELTAY] = random(5) + 1;
    
    Serial.print("x: ");
    Serial.print(icons[f][XPOS], DEC);
    Serial.print(" y: ");
    Serial.print(icons[f][YPOS], DEC);
    Serial.print(" dy: ");
    Serial.println(icons[f][DELTAY], DEC);
  }

  while (1) {
    // draw each icon
    for (uint8_t f=0; f< NUMFLAKES; f++) {
      display.drawBitmap(icons[f][XPOS], icons[f][YPOS], logo16_glcd_bmp, w, h, WHITE);
    }
    display.display();
    delay(200);
    
    // then erase it + move it
    for (uint8_t f=0; f< NUMFLAKES; f++) {
      display.drawBitmap(icons[f][XPOS], icons[f][YPOS],  logo16_glcd_bmp, w, h, BLACK);
      // move it
      icons[f][YPOS] += icons[f][DELTAY];
      // if its gone, reinit
      if (icons[f][YPOS] > display.height()) {
	icons[f][XPOS] = random(display.width());
	icons[f][YPOS] = 0;
	icons[f][DELTAY] = random(5) + 1;
      }
    }
   }
}


void testdrawchar(void) {
  display.setTextSize(1);
  display.setTextWrap(false);
  display.setTextColor(WHITE);
  display.setCursor(0,0);

  for (int16_t i=0; i < 168; i++) {
    if (i == '\n') continue;
    display.write(i);
    if ((i > 0) && (i % 21 == 0))
      display.println();
  }    
  display.display();
}

void testdrawcircle(void) {
  for (uint8_t i=0; i<display.height(); i+=2) {
    display.drawCircle(display.width()/2, display.height()/2, i, WHITE);
    display.display();
  }
}

void testfillrect(void) {
  uint8_t color = 1;
  for (int16_t i=0; i<display.height()/2; i+=3) {
    // alternate colors
    display.fillRect(i, i, display.width()-i*2, display.height()-i*2, color%2);
    display.display();
    color++;
  }
}

void testdrawtriangle(void) {
  for (int16_t i=0; i<min(display.width(),display.height())/2; i+=5) {
    display.drawTriangle(display.width()/2, display.height()/2-i,
                     display.width()/2-i, display.height()/2+i,
                     display.width()/2+i, display.height()/2+i, WHITE);
    display.display();
  }
}

void testfilltriangle(void) {
  uint8_t color = WHITE;
  for (int16_t i=min(display.width(),display.height())/3; i>0; i-=5) {
    display.fillTriangle(display.width()/2, display.height()/2-i,
                     display.width()/2-i, display.height()/2+i,
                     display.width()/2+i, display.height()/2+i, WHITE);
    if (color == WHITE) color = BLACK;
    else color = WHITE;
    display.display();
  }
}

void testdrawroundrect(void) {
  for (uint8_t i=0; i<display.height()/3-2; i+=2) {
    display.drawRoundRect(i, i, display.width()-2*i, display.height()-2*i, display.height()/4, WHITE);
    display.display();
  }
}

void testfillroundrect(void) {
  uint8_t color = WHITE;

  for (uint8_t i=0; i<display.height()/3-2; i+=2) {
    display.fillRoundRect(i, i, display.width()-2*i, display.height()-2*i, display.height()/4, color);
    if (color == WHITE) color = BLACK;
    else color = WHITE;
    display.display();
  }
}
   
void testdrawrect(void) {
  for (int16_t i=0; i<display.height()/2; i+=2) {
    display.drawRect(i, i, display.width()-2*i, display.height()-2*i, WHITE);
    display.display();
  }
}

void testdrawline() {  
  for (int16_t i=0; i<display.width(); i+=4) {
    display.drawLine(0, 0, i, display.height()-1, WHITE);
    display.display();
  }
  for (int16_t i=0; i<display.height(); i+=4) {
    display.drawLine(0, 0, display.width()-1, i, WHITE);
    display.display();
  }
  delay(250);
  
  display.clearDisplay();
  for (int16_t i=0; i<display.width(); i+=4) {
    display.drawLine(0, display.height()-1, i, 0, WHITE);
    display.display();
  }
  for (int16_t i=display.height()-1; i>=0; i-=4) {
    display.drawLine(0, display.height()-1, display.width()-1, i, WHITE);
    display.display();
  }
  delay(250);
  
  display.clearDisplay();
  for (int16_t i=display.width()-1; i>=0; i-=4) {
    display.drawLine(display.width()-1, display.height()-1, i, 0, WHITE);
    display.display();
  }
  for (int16_t i=display.height()-1; i>=0; i-=4) {
    display.drawLine(display.width()-1, display.height()-1, 0, i, WHITE);
    display.display();
  }
  delay(250);

  display.clearDisplay();
  for (int16_t i=0; i<display.height(); i+=4) {
    display.drawLine(display.width()-1, 0, 0, i, WHITE);
    display.display();
  }
  for (int16_t i=0; i<display.width(); i+=4) {
    display.drawLine(display.width()-1, 0, i, display.height()-1, WHITE); 
    display.display();
  }
  delay(250);
}

void setup()   {                
  Serial.begin(9600);
  Serial.println("SSD1325 OLED test");
 
  // by default, we'll generate the high voltage from the 3.3v line internally! (neat!)
  display.begin();
  // init done

  display.display(); // show splashscreen
  delay(1000);
  display.clearDisplay();   // clears the screen and buffer

  graydient();
  delay(1000);
  display.clearDisplay();   // clears the screen and buffer  

/*
  for (uint8_t c=0; c<127; c++) {
    display.command(SSD1325_SETCONTRAST); // set contrast current
    display.command(c);  // max!
    Serial.println(c, DEC);
    delay(100);
  }
*/

  // draw a single pixel
  display.drawPixel(10, 10, WHITE);
  display.display();
  delay(1000);
  display.clearDisplay();

  // draw many lines
  testdrawline();
  display.display();
  delay(1000);
  display.clearDisplay();

  // draw rectangles
  testdrawrect();
  display.display();
  delay(1000);
  display.clearDisplay();

  // draw multiple rectangles
  testfillrect();
  display.display();
  delay(2000);
  display.clearDisplay();

  // draw mulitple circles
  testdrawcircle();
  display.display();
  delay(2000);
  display.clearDisplay();

  // draw a white circle, 10 pixel radius
  display.fillCircle(display.width()/2, display.height()/2, 10, WHITE);
  display.display();
  delay(2000);
  display.clearDisplay();

  testdrawroundrect();
  delay(2000);
  display.clearDisplay();

  testfillroundrect();
  delay(2000);
  display.clearDisplay();

  testdrawtriangle();
  delay(2000);
  display.clearDisplay();
   
  testfilltriangle();
  delay(2000);
  display.clearDisplay();

  // draw the first ~12 characters in the font
  testdrawchar();
  display.display();
  delay(2000);
  display.clearDisplay();

  for (uint8_t rot=0; rot < 4; rot++) {
    display.setRotation(rot);
    display.clearDisplay();
  // text display tests
  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.setCursor(0,0);
  display.println("Hello, world!");
  display.setTextColor(BLACK, WHITE); // 'inverted' text
  display.println(3.141592);
  display.setTextSize(2);
  display.setTextColor(WHITE);
  display.print("0x"); display.println(0xDEADBEEF, HEX);
  display.display();
  delay(2000);
  }

display.setRotation(0);

  // miniature bitmap display
  display.clearDisplay();
  display.drawBitmap(30, 16,  logo16_glcd_bmp, 16, 16, 1);
  display.display();

  // invert the display
  display.invertDisplay(true);
  delay(1000); 
  display.invertDisplay(false);
  delay(1000); 

  // draw a bitmap icon and 'animate' movement
  testdrawbitmap(logo16_glcd_bmp, LOGO16_GLCD_HEIGHT, LOGO16_GLCD_WIDTH);
}


void loop() {

}

// #include <avr/io.h>
// #include <avr/interrupt.h>
// #include <util/delay.h>
// #include <test.h>

// #include <Adafruit_GFX.h>

// #define F_CPU 128000L

// double dutyCycle = 1;

// int main() {
//   // put your setup code here, to run once:
//   DDRB = (1 << PORTB3);
//   DDRD = (1 << PORTD6);

//   PORTD = (1 << PORTD6);

//   TCCR0A = (1 << COM0A1) | (1 << WGM01) | (1 << WGM00);
  
//   TIMSK0 = (1 << TOIE0);
  
//   OCR0A = dutyCycle*255/100;

//   sei();
  
//   TCCR0B = (1 << CS00); // starts timer

//   while(1){
//     PORTD = 0;
//     PORTD = (1 << PORTD6);
//     dutyCycle+=10;
//     if(dutyCycle==100) dutyCycle = 0;
//   }

//   return 0;

// }

// ISR(TIMER0_OVF_vect){

//   OCR0A = dutyCycle*255/100;

// }



// // ISR(PCINT0_vect) {
// // 	if (PINA & _BV(PA0)) update = true;
// // 	_delay_ms(500); // Giant friggin' debounce delay
// // }

// // int main(void){

// //   DDRA = 0x01; // Use PA0 as output, PA1 as input
// // 	PORTA = 0x00;

// //   PCICR |= _BV(PCIE0);
// // 	PCMSK0 |= _BV(PCINT0);

// //   sei();

// // }

// // --------

// // #include <avr/io.h>
// // #include <avr/interrupt.h>
// // #include <util/atomic.h>
// // #include <util/delay.h>
// // #include <stdbool.h>

// // /*
// //  * A global flag used to communicate between the Interrupt Service Routine
// //  * and the main program.  It has to be declared volatile or the compiler
// //  *  might optimize it out.
// //  */
// // volatile bool update = false;

// // /**
// //  * set update on a high edge
// //  */
// // ISR(PCINT0_vect) {
// // 	if (PINB & _BV(PB0)) update = true;
// // 	_delay_ms(500); // Giant friggin' debounce delay
// // }

// // int main(void) {

// // 	/**
// // 	 * Using PB1 as LED output
// // 	 */
// // 	DDRB = 0x02;
// // 	PORTB = 0x00;

// // 	/**
// // 	 * Pin Change Interrupt enable on PCINT0 (PB0)
// // 	 */
// // 	PCICR |= _BV(PCIE0);
// // 	PCMSK0 |= _BV(PCINT0);

// // 	// Turn interrupts on.
// // 	sei();

// // 	while(1) {

// // 		// This turns interrupts off for the code inside it.  Probably
// // 		// not needed here but it's good to know about.
// // 		ATOMIC_BLOCK(ATOMIC_FORCEON) {

// // 			// If the ISR has indicated we need to update the state
// // 			// then run this block.
// // 			if (update) {

// // 				// Toggle the pins on PORTB on/off.
// // 				PORTB ^= 0x02;

// // 				/*
// // 				 * We reset the update flag to false to indicate that
// // 				 * we are done.  This ensures that this block will not
// // 				 * be executed until update is set to true again, which
// // 				 * is only done by the interrupt service routine.
// // 				 */
// // 				update = false;
// // 			}

// // 		}

// // 	}

// // }